{"version":3,"sources":["components/Icon.js","App.js","reportWebVitals.js","index.js"],"names":["Icon","name","className","itemArray","Array","fill","App","useState","isCross","setIsCross","winMessage","setWinMessage","changeItem","itemNumber","toast","type","Container","position","Row","Col","md","Button","color","block","onClick","map","item","index","Card","CardBody","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAceA,MAVf,YACI,OADiB,EAANC,MAEP,IAAK,SACD,OAAO,cAAC,IAAD,CAAaC,UAAU,SAClC,IAAK,QACD,OAAO,cAAC,IAAD,CAASA,UAAU,SAC9B,QACG,OAAO,cAAC,IAAD,CAAOA,UAAU,W,gECG7BC,G,YAAY,IAAIC,MAAM,GAAGC,KAAK,UAiIrBC,MA9Hf,WAAe,MAEkBC,oBAAS,GAF3B,mBAENC,EAFM,KAEIC,EAFJ,OAGwBF,mBAAS,IAHjC,mBAGNG,EAHM,KAGOC,EAHP,KA0Eb,SAASC,EAAYC,GACnB,OAAGH,EACMI,YAAMJ,EAAY,CAAEK,KAAK,YAEL,UAA1BZ,EAAUU,GAKJC,YAAM,iBAAkB,CAACC,KAAK,WAJpCZ,EAAUU,GAAeL,EAAW,QAAQ,SAC5CC,GAAYD,QAjEZL,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,IACV,UAAjBA,EAAU,GAEVQ,EAAc,GAAD,OAAIR,EAAU,GAAd,UAGG,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,GAE3BQ,EAAc,GAAD,OAAIR,EAAU,GAAd,UAGI,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,GAG3BQ,EAAc,GAAD,OAAIR,EAAU,GAAd,UAGI,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,GAE3BQ,EAAc,GAAD,OAAIR,EAAU,GAAd,UAGI,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,GAE3BQ,EAAc,GAAD,OAAIR,EAAU,GAAd,UAGI,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,GAE3BQ,EAAc,GAAD,OAAIR,EAAU,GAAd,UAGI,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,GAE3BQ,EAAc,GAAD,OAAIR,EAAU,GAAd,UAGI,UAAjBA,EAAU,IACVA,EAAU,KAAOA,EAAU,IAC3BA,EAAU,KAAOA,EAAU,IAE3BQ,EAAc,GAAD,OAAIR,EAAU,GAAd,YAkBjB,OACE,eAACa,EAAA,EAAD,CAAWd,UAAU,MAArB,UACE,oBAAIA,UAAU,2BAAd,qDACA,cAAC,IAAD,CAAgBe,SAAS,kBACzB,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAKC,GAAI,EAAGlB,UAAU,cAAtB,UACGQ,EAEC,sBAAKR,UAAU,YAAf,UACE,oBAAIA,UAAU,0CAAd,SACIQ,IAEJ,cAACW,EAAA,EAAD,CACEC,MAAM,UACNC,OAAK,EACLC,QAhGd,WACEf,GAAW,GACXE,EAAc,IACdR,EAAUE,KAAK,QAAS,EAAG,IA0FjB,gCAOF,qBAAIH,UAAU,2BAAd,UACIM,EAAU,SAAW,QADzB,YAIF,qBAAKN,UAAU,OAAf,SACGC,EAAUsB,KAAI,SAASC,EAAKC,GAC3B,OACE,cAACC,EAAA,EAAD,CAAMJ,QAAS,kBAAMZ,EAAWe,IAAhC,SACE,cAACE,EAAA,EAAD,CAAU3B,UAAU,MAApB,SACE,cAAC,EAAD,CAAMD,KAAMyB,sBCxHjBI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.125e53dc.chunk.js","sourcesContent":["import React from 'react';\r\nimport {FaTimes ,FaPen, FaRegCircle} from \"react-icons/fa\";\r\n\r\n//Icon function calling here\r\nfunction Icon({name}){\r\n    switch (name) {\r\n        case 'circle':\r\n            return <FaRegCircle className=\"icon\"/>\r\n        case 'cross':\r\n            return <FaTimes className=\"icon\"/>\r\n        default :\r\n           return <FaPen className=\"icon\"/>\r\n    }\r\n}\r\nexport default Icon;","import React, {useState} from \"react\";\n// Component import\nimport Icon from './components/Icon';\n\n// Toast imports\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n// Bootstrap imports\nimport {Card, CardBody, Container,Button, Col, Row} from \"reactstrap\"\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\n\nconst itemArray = new Array(9).fill(\"empty\");\n\n\nfunction App() {\n  // States\n  const [isCross , setIsCross] = useState(false);\n  const [winMessage , setWinMessage] = useState(\"\");\n   \n //Reload the game \n  function reloadGame(){\n    setIsCross(false);\n    setWinMessage(\"\");\n    itemArray.fill(\"empty\" ,0 ,9)\n  }\n\n  // Check is winner\n  function checkIsWinner()\n  {\n    if(itemArray[0] === itemArray[1] &&\n       itemArray[0] === itemArray[2] &&\n       itemArray[0] !== \"empty\")\n    {\n       setWinMessage(`${itemArray[0]} wins`)\n    }\n    else if(\n      itemArray[3] !== \"empty\" &&\n      itemArray[3] === itemArray[4]&&\n      itemArray[4] === itemArray[5])\n    {\n      setWinMessage(`${itemArray[3]} wins`)\n    }\n    else if(\n      itemArray[6] !== \"empty\" &&\n      itemArray[6] === itemArray[7]&&\n      itemArray[7] === itemArray[8]\n      )\n    {\n      setWinMessage(`${itemArray[6]} wins`)\n    }\n    else if(\n      itemArray[0] !== \"empty\" &&\n      itemArray[0] === itemArray[3]&&\n      itemArray[3] === itemArray[6])\n    {\n      setWinMessage(`${itemArray[0]} wins`)\n    }\n    else if(\n      itemArray[1] !== \"empty\" &&\n      itemArray[1] === itemArray[4]&&\n      itemArray[4] === itemArray[7])\n    {\n      setWinMessage(`${itemArray[1]} wins`)\n    }\n    else if(\n      itemArray[2] !== \"empty\" &&\n      itemArray[2] === itemArray[5]&&\n      itemArray[5] === itemArray[8])\n    {\n      setWinMessage(`${itemArray[2]} wins`)\n    }\n    else if(\n      itemArray[0] !== \"empty\" &&\n      itemArray[0] === itemArray[4]&&\n      itemArray[4] === itemArray[8])\n    {\n      setWinMessage(`${itemArray[0]} wins`)\n    }\n    else if(\n      itemArray[2] !== \"empty\" &&\n      itemArray[2] === itemArray[4]&&\n      itemArray[4] === itemArray[6])\n    {\n      setWinMessage(`${itemArray[2]} wins`)\n    }\n  }  \n\n  //Icon Change Codition Check\n  function changeItem (itemNumber){\n    if(winMessage){\n      return toast(winMessage, { type:\"success\"})\n    }\n    if(itemArray[itemNumber] === \"empty\"){\n       itemArray[itemNumber] = (isCross) ? \"cross\":\"circle\";\n       setIsCross(!isCross);\n    }\n    else{\n      return toast(\"Already filled\", {type:\"error\"})\n    }\n    checkIsWinner();\n  }\n  return (\n    <Container className=\"P-5\">\n      <h1 className=\"text-center text-success\">TIC-TAC-TOE GAME In ReactJs Using State</h1>\n      <ToastContainer position=\"bottom-center\"/>\n      <Row>\n        <Col md={6} className=\"offset-md-3\">\n          {winMessage ? \n          (\n            <div className=\"mb-2 mt-2\">\n              <h1 className=\"text-success text-center text-uppercase\"> \n                 {winMessage}\n              </h1>\n              <Button \n                color=\"success\"\n                block\n                onClick={reloadGame}>Reload the game\n              </Button>\n            </div>\n          ) : (\n            <h1 className=\"text-center text-warning\">\n              { isCross ? \"Circle\":  \"Cross\" } turns\n            </h1>\n          )}\n          <div className=\"grid\">\n            {itemArray.map(function(item,index){\n              return(\n                <Card onClick={() => changeItem(index)}>\n                  <CardBody className=\"box\">\n                    <Icon name={item}/>\n                  </CardBody>\n                </Card>\n              )\n            })}\n          </div>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}